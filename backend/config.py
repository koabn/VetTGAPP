import os
import logging
from pathlib import Path

# Пути к файлам
BASE_DIR = Path(__file__).parent.parent.parent
DATABASE_FILE = BASE_DIR / "data" / "database.csv"
LOG_FILE = BASE_DIR / "logs" / "app.log"
DEBUG_LOG_FILE = BASE_DIR / "logs" / "debug.log"

# Настройки базы данных
DATABASE_ENCODING = 'cp1251'
DATABASE_SEPARATOR = ';'

# Настройки логирования
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_LEVEL = logging.INFO

# Типы запросов и их ключевые слова
QUERY_TYPES = {
    'usage': ['применение', 'использование', 'как использовать', 'как применять'],
    'dosage': ['доза', 'дозировка', 'сколько давать'],
    'side_effects': ['побочные', 'побочные эффекты', 'осложнения'],
    'contraindications': ['противопоказания', 'нельзя'],
    'storage': ['хранение', 'как хранить'],
    'interactions': ['взаимодействие', 'совместимость']
}

# Типы животных
ANIMAL_TYPES = ['cat', 'dog']

# Настройки логирования
LOG_FORMAT = '%(asctime)s - %(levelname)s - %(name)s - %(message)s'
LOG_FILE = BASE_DIR / 'logs' / 'bot.log'
DEBUG_LOG_FILE = BASE_DIR / 'logs' / 'search_debug.log'  # Новый файл для расширенного логирования
LOG_LEVEL = 'INFO'

# Ключевые слова для анализа запросов
KEYWORDS = {
    'mechanism': ['механизм', 'действие', 'действия', 'работает', 'действует', 'механизма', 'как работает', 'как действует', 'фармакология', 'фармакологическое действие'],
    'usage': ['применение', 'применять', 'использовать', 'использование', 'преминение', 'применения', 'вводить', 'давать', 'как применять', 'как использовать', 'инструкция'],
    'storage': ['хранение', 'хранить', 'хронение', 'хранения', 'как хранить', 'условия хранения', 'где хранить', 'стабильность'],
    'contraindications': ['противопоказания', 'нельзя', 'противопоказание', 'противопаказания', 'запрещено', 'когда нельзя', 'кому нельзя', 'меры предосторожности', 'осторожность'],
    'side_effects': ['побочные', 'эффекты', 'пабочные', 'эфекты', 'побочноe', 'осложнения', 'побочные действия', 'побочные реакции', 'реакции'],
    'indications': ['показания', 'показание', 'показано', 'применяется', 'используется', 'назначают', 'когда', 'в каких случаях', 'для чего', 'клиническое применение'],
    'interactions': ['взаимодействие', 'взаимодействия', 'совместимость', 'совместим', 'совместно', 'вместе', 'можно ли вместе', 'сочетается', 'сочетание', 'лекарственное взаимодействие'],
    'monitoring': ['мониторинг', 'наблюдение', 'анализы', 'лабораторные', 'тесты', 'контроль', 'следить', 'проверять'],
    'form': ['форма', 'выпуск', 'форма выпуска', 'как выпускается', 'в чем выпускается', 'в каком виде', 'лекарственная форма', 'препарат'],
    'trade_names': ['торговое', 'торговые', 'названия', 'аналог', 'аналоги', 'замена', 'заменители', 'другие названия'],
    'group': ['группа', 'класс', 'классификация', 'тип', 'категория', 'к какой группе относится', 'какой группы'],
    'animals': {
        'dog': ['собак', 'собака', 'собаки', 'пес', 'пёс', 'щенок', 'сабака', 'собаке', 'собакам'],
        'cat': ['кошек', 'кошка', 'кошки', 'кот', 'котенок', 'котёнок', 'кошька', 'кошке', 'котам', 'кошкам']
    }
}

# Настройки поиска
SIMILARITY_THRESHOLDS = {
    'exact_match': 1.0,
    'high_similarity': 0.9,
    'medium_similarity': 0.7,
    'low_similarity': 0.5
}

def get_telegram_token():
    """Получает токен из переменных окружения"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        raise ValueError("BOT_TOKEN не найден в переменных окружения")
    return token 